#ifndef _PLAYER_
#define _PLAYER_

#include <memory>
#include <vector>
#include "abstractboard.h"
#include "board.h"

class Player final
{
    class PlayerImpl;
    std::unique_ptr<PlayerImpl> impl;

public:
    enum{LEFT=0, RIGHT, DOWN, CLOCKWISE, COUNTERCLOCKWISE, DROP, LVLUP, LVLDOWN, I, J, L, O, S, Z, T};

    Player(std::vector<char> seq, int startLvl, int seed);
    ~Player();

    // accessor methods
    std::vector<char> getState(); // returns the char represented boardstate
    int getLevel();               // returns the player's level
    int getScore();               // returns the player's score
    char getNext();               // returns the player's next block
    int getCleared();             // return player's total cleared rows

    // effect modifiers
    void apply(); // returns a board with the effects applied
    void resetEffects();                    // resets the player state and removes all effects
    void setEffect(std::string effect);     // sets effect for the player
    void setForcedChar(char c); // sets the forced block generated by force()

    // player modifiers
    void levelUp();   // increases the level
    void levelDown(); // decreases the level
    void playTurn(int cmd);
    void setRandom(bool isRandom);
    void setSequence(std::vector<char> newSeq); 
    void setup();
};

#endif
